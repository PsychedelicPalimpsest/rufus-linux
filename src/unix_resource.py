#  Rufus: The Reliable USB Formatting Utility
#  Copyright Â© 2025 PsychedelicPalimpsest
#
#  Convert (to the best of my ability) rufus.rc to Gresources.xml
#  so that resources can be used in cross-platform GCC. These resources
#  are NEVER USED IN WINDOWS!
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os

DIR = os.path.dirname(os.path.abspath(__file__))
RUFUS_RC = os.path.join(DIR, "rufus.rc")
assert os.path.exists(RUFUS_RC), "rufus.rc MUST exist to be converted to xml!"

def isAsset(line):
    return " RCDATA " in line
def processAsset(line):
    # The name of the asset is terminated by many spaces
    firstSpace = line.find(" ")
    rName = line[:firstSpace]
    line = line[firstSpace:].lstrip() # 

    
    # Now line is at the RCDATA keyword
    nextSpace = line.find(" ")
    assert "RCDATA" == line[:nextSpace], "Unknown resource item"
    
    # Now we have the location of the asset, this little trick
    # allows us to evaluate any tricky string escapes.
    rLocInStr = line[nextSpace:].strip().encode("utf-8").decode('unicode_escape')

    assert rLocInStr.startswith('"') and rLocInStr.endswith('"'), "Invalid resource"

    return (rName, rLocInStr[1:-1])
PREFIX='../res/'


def parseRufusRc():
    data = open(RUFUS_RC, "r").read()
    # We only care about the resources themselves, not the rest
    ti3_lines = data.split("// Generated from the TEXTINCLUDE 3 resource.")[-1].split("\n")

    ti3_data = map(processAsset, filter(isAsset, ti3_lines))
    
    f = open("unix_resources.xml", "w")
    f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    f.write('<!-- GResources XML file autogenerated by unix_resource.py - DO NOT EDIT! -->\n')
    f.write('<gresources>\n')
    f.write(f'  <gresource prefix="/res/">\n')
    for alias, path in ti3_data:
        # Strip away annoying prefix
        assert path.startswith(PREFIX), "Unexpected resource locations"
        path = path[len(PREFIX):]
        
        f.write(f"    <file alias=\"{alias}\">{path}</file>\n")
    f.write('  </gresource>\n')
    f.write('</gresources>')
    f.close()

# TODO: Add to make files something for unix resources
# via: glib-compile-resources --target=unix_resources.c --generate-source unix_resources.xml --sourcedir=../res

if __name__ == "__main__":
    parseRufusRc()